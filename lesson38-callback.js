// Тема: callback

/*Обратные вызовы (Callbacks): 
Это функции, которые передаются в другую функцию 
в качестве аргумента и выполняются позже внутри этой функции.*/

// Функция, которая принимает число и функцию обратного вызова
function squareAsync(number, callback) {
  // Имитация асинхронной операции (например, запрос к серверу)
  setTimeout(function() {
    const result = number * number;
    // Вызов функции обратного вызова с результатом
    callback(result);
  }, 1000); // Подождем 1 секунду перед завершением асинхронной операции
}

function displayResult(result) {
  console.log("Результат:", result);
}

squareAsync(5, displayResult);

/* 
Функции обратного вызова (callback functions) в JavaScript 
используются для решения проблемы асинхронности и управления 
потоком выполнения кода. Основные проблемы, которые они помогают решить:

$Асинхронность:
JavaScript выполняется в одном потоке, 
и многие операции могут быть асинхронными 
(например, загрузка данных с сервера, обработка событий). 
Callbacks позволяют организовать выполнение кода после завершения асинхронной операции.

$Обработка событий:
Когда происходит событие (например, клик мыши, завершение загрузки), 
callback функции могут использоваться для определения того, 
что должно произойти после возникновения события.

$Контроль порядка выполнения:
Используя callbacks, можно определить 
последовательность выполнения операций, особенно 
в случае асинхронных вызовов. Например, дождаться завершения загрузки данных, 
а затем выполнить определенные действия.

$Избежание "Callback Hell":
Callback Hell (иногда называемый "Pyramid of Doom") возникает, 
когда множество вложенных колбеков делают код трудночитаемым. Современные подходы, такие как использование Promise или async/await, помогают справиться с этой проблемой, но изначально callbacks были единственным способом обработки асинхронности в JavaScript.

$Повторное использование кода:
Callbacks позволяют создавать функции, которые можно передавать в 
качестве аргументов, что способствует повторному использованию кода.
*/